name: Automatic Release

on:
  push:
    # Only run when code is pushed to the main branch
    branches:
      - main
      - master
    paths:
      # Only run if the build.gradle file has changed
      - 'build.gradle'
      - 'src/**'

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    # ------------------
    # 1. SETUP AND BUILD
    # ------------------
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch full history for tag detection
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        # Executes the 'shadowJar' task which typically bundles dependencies for Paper plugins
        run: ./gradlew shadowJar

      # -----------------------------------
      # 2. VERSION & TAGGING DETECTION
      # -----------------------------------
      # Extract the version number directly from build.gradle for the tag/release name
      - name: Extract Project Version
        id: version
        run: |
          VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' build.gradle | head -1)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      # Check if the extracted version already has a tag on the repository
      - name: Check for Existing Tag
        id: tag_check
        run: |
          TAG_NAME="v${{ steps.version.outputs.PROJECT_VERSION }}"
          if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME already exists. Skipping release."
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "New version detected! Preparing release."
          fi

      # Stop if the tag already exists (prevents duplicate releases)
      - name: Skip Release if Tag Exists
        if: steps.tag_check.outputs.TAG_EXISTS == 'true'
        run: exit 0

      # ----------------------
      # 3. RELEASE TO GITHUB
      # ----------------------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.PROJECT_VERSION }}
          name: Release v${{ steps.version.outputs.PROJECT_VERSION }}
          body: |
            ## âœ¨ New Features/Fixes
            
            * Automatically built for version ${{ steps.version.outputs.PROJECT_VERSION }}.
          draft: false
          prerelease: false
          # Assumes your JAR file is output to build/libs/your-artifact-version.jar
          files: build/libs/*-${{ steps.version.outputs.PROJECT_VERSION }}.jar

        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}